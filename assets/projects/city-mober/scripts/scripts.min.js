"use strict";
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,o=Object.create(null),i=function(){clearTimeout(t),t=setTimeout(e,100)},r=function(){},u=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,o,i;return window.XMLHttpRequest&&(n=new XMLHttpRequest,o=t(location),i=t(e),n=void 0===n.withCredentials&&""!==i&&i!==o?XDomainRequest||void 0:XMLHttpRequest),n},s="http://www.w3.org/1999/xlink";e=function(){var e,t,n,d,a,c,l,v,m,h,f=0;function w(){var e;0===(f-=1)&&(r(),window.addEventListener("resize",i,!1),window.addEventListener("orientationchange",i,!1),window.MutationObserver?((e=new MutationObserver(i)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),r=function(){try{e.disconnect(),window.removeEventListener("resize",i,!1),window.removeEventListener("orientationchange",i,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",i,!1),r=function(){document.documentElement.removeEventListener("DOMSubtreeModified",i,!1),window.removeEventListener("resize",i,!1),window.removeEventListener("orientationchange",i,!1)}))}function b(e){return function(){!0!==o[e.base]&&(e.useEl.setAttributeNS(s,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function E(e){return function(){var t,n=document.body,o=document.createElement("x");e.onload=null,o.innerHTML=e.responseText,(t=o.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),w()}}function g(e){return function(){e.onerror=null,e.ontimeout=null,w()}}for(r(),m=document.getElementsByTagName("use"),a=0;a<m.length;a+=1){try{t=m[a].getBoundingClientRect()}catch(e){t=!1}e=(v=(d=m[a].getAttribute("href")||m[a].getAttributeNS(s,"href")||m[a].getAttribute("xlink:href"))&&d.split?d.split("#"):["",""])[0],n=v[1],c=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!c?(m[a].hasAttribute("href")&&m[a].setAttributeNS(s,"xlink:href",d),e.length&&(!0!==(h=o[e])&&setTimeout(b({useEl:m[a],base:e,hash:n}),0),void 0===h&&void 0!==(l=u(e))&&(h=new l,o[e]=h,h.onload=E(h),h.onerror=g(h),h.ontimeout=g(h),h.open("GET",e),h.send(),f+=1))):c?e.length&&o[e]&&setTimeout(b({useEl:m[a],base:e,hash:n}),0):void 0===o[e]?o[e]=!0:o[e].onload&&(o[e].abort(),delete o[e].onload,o[e]=!0)}m="",f+=1,w()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}();var $navIcon=document.querySelector(".header-nav__icon"),$navClose=document.querySelector(".header-nav__close-btn");$navIcon.addEventListener("click",(function(){document.body.classList.add("nav-active")})),$navClose.addEventListener("click",(function(){document.body.classList.remove("nav-active")}));var $minus=document.querySelector(".minus"),$number=document.querySelector(".number"),$plus=document.querySelector(".plus");$minus.addEventListener("click",(function(){parseInt($number.value)>1&&($number.value=(parseInt($number.value)-1).toString())})),$plus.addEventListener("click",(function(){$number.value=(parseInt($number.value)+1).toString()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
