"use strict";var $navIcon=document.querySelector(".header-nav__icon");$navIcon.addEventListener("click",(function(){document.body.scrollTop>150||document.documentElement.scrollTop,document.body.classList.toggle("nav-active")}));var $navList=document.querySelector(".header-nav__list");$navList.addEventListener("click",(function(e){!document.body.classList.contains("nav-active")||document.body.classList.contains("dropdown-active")||e.target.closest(".header-dropdown")||e.target.closest(".header-dropdown__content")||document.body.classList.remove("nav-active")}));var $header=document.querySelector(".header");function scrollFunction(){document.body.scrollTop>150||document.documentElement.scrollTop>150?document.body.classList.add("nav-fixed"):(document.body.classList.remove("nav-fixed"),document.body.classList.contains("nav-active")&&document.body.classList.remove("nav-active"))}window.onscroll=function(){scrollFunction()};var $headerDropdown=document.querySelector(".header-dropdown"),$headerDropdownBtn=document.querySelector(".header-dropdown__btn"),$headerDropdownContent=document.querySelector(".header-dropdown__content");if($headerDropdown.addEventListener("click",(function(){document.body.classList.toggle("dropdown-active")})),document.body.addEventListener("click",(function(e){document.body.classList.contains("dropdown-active")&&!e.target.closest(".header-dropdown")?(document.body.classList.remove("dropdown-active"),$headerDropdownContent.style.display="none"):document.body.classList.contains("dropdown-active")?$headerDropdownContent.style.display="block":$headerDropdownContent.style.display="none"})),document.querySelectorAll('a[href^="#"').forEach((function(e){e.getAttribute("href").length>1&&e.addEventListener("click",(function(e){e.preventDefault(),document.querySelector(this.getAttribute("href")).scrollIntoView({behavior:"smooth"})}))})),"index"===document.body.dataset.page){var swiper1=new Swiper(".review__slider",{loop:!0,pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}}),swiper2=new Swiper(".reviewimg__slider",{slidesPerView:1,loop:!0,pagination:{el:".swiper-pagination",clickable:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},breakpoints:{959:{slidesPerView:9,spaceBetween:20}}}),swiper3=new Swiper(".condition1__slider",{loop:!0,effect:"fade",autoplay:{delay:2500,disableOnInteraction:!0},navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"}});function openModal(e){var t,n=e.target.closest("button");n.classList.contains("btn-modal1")&&(t=document.querySelector(".modal1")),n.classList.contains("btn-modal2")&&(t=document.querySelector(".modal2")),n.classList.contains("btn-modal3")&&(t=document.querySelector(".modal3")),document.body.classList.toggle("modal-active"),t.style.display="block",t.addEventListener("click",(function(e){e.target.closest(".modal-content")||(document.body.classList.toggle("modal-active"),t.style.display="none")}))}document.querySelectorAll(".btn-modal1").forEach((function(e){return e.addEventListener("click",openModal)})),document.querySelector(".btn-modal2").addEventListener("click",openModal),document.querySelector(".btn-modal3").addEventListener("click",openModal)}if("index"!==document.body.dataset.page){function openModal(e){var t;e.target.closest("button").classList.contains("btn-modal1")&&(t=document.querySelector(".modal1")),document.body.classList.toggle("modal-active"),t.style.display="block",t.addEventListener("click",(function(e){e.target.closest(".modal-content")||(document.body.classList.toggle("modal-active"),t.style.display="none")}))}document.querySelectorAll(".btn-modal1").forEach((function(e){return e.addEventListener("click",openModal)}))}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,o=Object.create(null),i=function(){clearTimeout(t),t=setTimeout(e,100)},d=function(){},r=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,o,i;return window.XMLHttpRequest&&(n=new XMLHttpRequest,o=t(location),i=t(e),n=void 0===n.withCredentials&&""!==i&&i!==o?XDomainRequest||void 0:XMLHttpRequest),n},c="http://www.w3.org/1999/xlink";e=function(){var e,t,n,a,s,l,u,m,v,p,w=0;function b(){var e;0===(w-=1)&&(d(),window.addEventListener("resize",i,!1),window.addEventListener("orientationchange",i,!1),window.MutationObserver?((e=new MutationObserver(i)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),d=function(){try{e.disconnect(),window.removeEventListener("resize",i,!1),window.removeEventListener("orientationchange",i,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",i,!1),d=function(){document.documentElement.removeEventListener("DOMSubtreeModified",i,!1),window.removeEventListener("resize",i,!1),window.removeEventListener("orientationchange",i,!1)}))}function h(e){return function(){!0!==o[e.base]&&(e.useEl.setAttributeNS(c,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function y(e){return function(){var t,n=document.body,o=document.createElement("x");e.onload=null,o.innerHTML=e.responseText,(t=o.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),b()}}function f(e){return function(){e.onerror=null,e.ontimeout=null,b()}}for(d(),v=document.getElementsByTagName("use"),s=0;s<v.length;s+=1){try{t=v[s].getBoundingClientRect()}catch(e){t=!1}e=(m=(a=v[s].getAttribute("href")||v[s].getAttributeNS(c,"href")||v[s].getAttribute("xlink:href"))&&a.split?a.split("#"):["",""])[0],n=m[1],l=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!l?(v[s].hasAttribute("href")&&v[s].setAttributeNS(c,"xlink:href",a),e.length&&(!0!==(p=o[e])&&setTimeout(h({useEl:v[s],base:e,hash:n}),0),void 0===p&&void 0!==(u=r(e))&&(p=new u,o[e]=p,p.onload=y(p),p.onerror=f(p),p.ontimeout=f(p),p.open("GET",e),p.send(),w+=1))):l?e.length&&o[e]&&setTimeout(h({useEl:v[s],base:e,hash:n}),0):void 0===o[e]?o[e]=!0:o[e].onload&&(o[e].abort(),delete o[e].onload,o[e]=!0)}v="",w+=1,b()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
