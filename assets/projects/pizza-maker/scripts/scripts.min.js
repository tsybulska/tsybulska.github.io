"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// nav mobile toggle
var $navIcon = document.querySelector('.nav__menu-icon');
$navIcon.addEventListener('click', function () {
  document.body.classList.toggle('menu-active');
});
var mobile = window.matchMedia("(max-width: 767.9px)");
var laptop = window.matchMedia("(min-width: 768px) and (max-width: 1250px)");
var desktop = window.matchMedia("(min-width: 1251px)"); // ==============================================
// if make page

if (document.body.dataset.page === 'make-page') {
  // make page add pizza items
  document.querySelector('.maker').querySelector('.maker__body').addEventListener('click', updatePizza);
  var $pizzaContainer = document.querySelector('.maker-pizza-bg');
  var pizzaLayers = 2;
  var pizzaTemp = [];
  var images = {
    'Красный': 'Красный.png',
    'Белый': 'Белый.png',
    'Цезарь': 'Белый.png',
    'Барбекю': 'Красный.png',
    'Томат': 'Томат.png',
    'Ананас': 'Ананас.png',
    'Маслины': 'Маслины.png',
    'Корнишоны': 'Корнишоны.png',
    'Салат': 'Салат.png',
    'Халапеньо': 'Халапеньо.png',
    'Перец': 'Перец.png',
    'Шампиньоны': 'Шампиньоны.png',
    'Лук': 'Лук.png',
    'Филе': 'Филе.png',
    'Фарш': 'Фарш.png',
    'Охотничьи': 'Охотничьи.png',
    'Копченый': 'Копченый.png',
    'Ветчина': 'Ветчина.png',
    'Бекон': 'Бекон.png',
    'Пепперони': 'Пепперони.png',
    'Креветки': 'Креветки.png',
    'Лосось': 'Лосось.png',
    'Мидии': 'Фарш.png',
    'Салями': 'Салями.png',
    'Моцарелла': 'Моцарелла.png',
    'Пармезан': 'Пармезан.png'
  };

  function updatePizza(event) {
    var $pizzaSpan = event.target.closest('.maker-row__product').querySelector('span');
    var $pizzaType = event.target.closest('.maker-row__product').dataset.type;
    var div = document.createElement('div');

    for (var key in images) {
      if ($pizzaType === key) {
        if (pizzaTemp.includes(key)) {
          $pizzaSpan.style.display = 'none';
          var remove = $pizzaContainer.querySelector("[data-bg=".concat(key, "]"));
          $pizzaContainer.removeChild(remove);
          pizzaTemp.splice(pizzaTemp.indexOf($pizzaType), 1);
        } else {
          $pizzaSpan.style.display = 'block';
          div.setAttribute('data-bg', $pizzaType);
          div.style.backgroundImage = "url('./assets/img/".concat(images[key], "')");
          div.style.zIndex = pizzaLayers;
          $pizzaContainer.appendChild(div);
          pizzaTemp.push(key);
        }
      }
    }

    pizzaLayers++;
  } // clear all button


  document.querySelectorAll('.pizza-new').forEach(function (el) {
    return el.addEventListener('click', clearPizza);
  });

  function clearPizza() {
    document.querySelector('.maker').querySelectorAll('.maker-row__product').forEach(function (el) {
      return el.querySelector('span').style.display = 'none';
    });
    $pizzaContainer.innerHTML = '';
    pizzaLayers = 2;
    pizzaTemp = [];
  }
} // ==============================================
// if half page


if (document.body.dataset.page === 'half-page') {
  // accordion mobile half page
  var accordions = document.querySelectorAll('.accordion');

  var _iterator = _createForOfIteratorHelper(accordions),
      _step;

  try {
    var _loop = function _loop() {
      var accordion = _step.value;
      var panels = accordion.querySelectorAll('.accordion__panel');

      var _iterator2 = _createForOfIteratorHelper(panels),
          _step2;

      try {
        var _loop2 = function _loop2() {
          var panel = _step2.value;
          var head = panel.querySelector('.accordion__header');
          head.addEventListener('click', function () {
            var _iterator3 = _createForOfIteratorHelper(panels),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var otherPanel = _step3.value;

                if (otherPanel !== panel) {
                  otherPanel.classList.remove('accordion__expanded');
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            panel.classList.toggle('accordion__expanded');
          });
        };

        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    } // half page add pizza items

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  document.querySelector('.half').querySelector('.maker__body').addEventListener('click', updateHalf);
  var warning = document.querySelector('.half').querySelectorAll('.half__warning');
  var $halfContainer = document.querySelector('.half-pizza-bg');
  var halfTemp = [];
  var firstHalf = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
  var secondHalf = ['13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'];
  var imagesHalf = {
    '1': 'Адриано-Итальяно.png',
    '2': 'Сырная-Банда.png',
    '3': 'Томатный-Цыпленок.png',
    '4': 'Цезарь.png',
    '5': 'Ананасовый-Экспресс.png',
    '6': 'Болгарский-Перец.png',
    '7': 'Грибная-Цыпа.png',
    '8': 'Джони-Пеперони.png',
    '9': 'Дочь-Мясника.png',
    '10': 'Марго-Рита.png',
    '11': 'Пивная.png',
    '12': 'Подводная-Братва.png',
    '13': 'Адриано-Итальяно.png',
    '14': 'Сырная-Банда.png',
    '15': 'Томатный-Цыпленок.png',
    '16': 'Цезарь.png',
    '17': 'Ананасовый-Экспресс.png',
    '18': 'Болгарский-Перец.png',
    '19': 'Грибная-Цыпа.png',
    '20': 'Джони-Пеперони.png',
    '21': 'Дочь-Мясника.png',
    '22': 'Марго-Рита.png',
    '23': 'Пивная.png',
    '24': 'Подводная-Братва.png'
  };

  function updateHalf(event) {
    var $halfSpan, $halfNum;

    if (event.target.closest('.maker-row__product')) {
      $halfSpan = event.target.closest('.maker-row__product').querySelector('span');
      $halfNum = event.target.closest('.maker-row__product').dataset.number;
    }

    if (halfTemp.includes($halfNum)) {
      $halfSpan.removeAttribute('style');
      var remove = $halfContainer.querySelector("[data-halfbg=\"".concat($halfNum, "\"]"));
      $halfContainer.removeChild(remove);
      halfTemp.splice(halfTemp.indexOf($halfNum), 1);
    } else if (halfTemp.length === 0) {
      pushHalf();
    } else if (halfTemp.length === 1) {
      if (firstHalf.includes($halfNum) && !firstHalf.includes(halfTemp[0]) || secondHalf.includes($halfNum) && !secondHalf.includes(halfTemp[0])) {
        pushHalf();
      }
    }

    if (halfTemp.length === 2) {
      warning.forEach(function (el) {
        return el.style.display = 'none';
      });
      if (desktop.matches) document.querySelector('.half').querySelector('.maker__body').style.marginTop = '80px';
      if (laptop.matches) document.querySelector('.half').querySelector('.maker-text__control').style.marginTop = '30px';
    }

    if (halfTemp.length < 2) {
      clearStyles();
    }

    function pushHalf() {
      halfTemp.push($halfNum);
      $halfSpan.style.display = 'block';
      var div = document.createElement('div');

      for (var key in imagesHalf) {
        if ($halfNum === key) {
          if (firstHalf.includes($halfNum)) {
            if (desktop.matches) div.classList.add('half-left-desktop');
            if (laptop.matches) div.classList.add('half-left-laptop');
            if (mobile.matches) div.classList.add('half-left-mobile');
          } else if (secondHalf.includes($halfNum)) {
            if (desktop.matches) div.classList.add('half-right-desktop');
            if (laptop.matches) div.classList.add('half-right-laptop');
            if (mobile.matches) div.classList.add('half-right-mobile');
          }

          div.setAttribute('data-halfbg', $halfNum);
          div.style.backgroundImage = "url('./assets/img/".concat(imagesHalf[key], "')");
          $halfContainer.appendChild(div);
        }
      }
    }
  } // clear all button


  document.querySelectorAll('.half-new').forEach(function (el) {
    return el.addEventListener('click', clearHalf);
  });

  function clearHalf() {
    document.querySelector('.half').querySelectorAll('.maker-row__product').forEach(function (el) {
      if (el.querySelector('span').hasAttribute('style')) {
        el.querySelector('span').removeAttribute('style');
      }
    });
    halfTemp = [];
    $halfContainer.innerHTML = '';
    clearStyles();
  }

  function clearStyles() {
    if (desktop.matches) document.querySelector('.warning__desktop').style.display = 'flex';
    if (laptop.matches) document.querySelector('.warning__laptop').style.display = 'flex';
    document.querySelector('.half').querySelector('.maker__body').style.marginTop = '0';
    if (desktop.matches) document.querySelector('.half').querySelector('.maker__body').style.marginTop = '0';
    if (laptop.matches) document.querySelector('.half').querySelector('.maker-text__control').style.marginTop = '0';
  }
}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */

/*jslint browser: true */

/*global XDomainRequest, MutationObserver, window */


(function () {
  "use strict";

  if (typeof window !== "undefined" && window.addEventListener) {
    var cache = Object.create(null); // holds xhr objects to prevent multiple requests

    var checkUseElems;
    var tid; // timeout id

    var debouncedCheck = function debouncedCheck() {
      clearTimeout(tid);
      tid = setTimeout(checkUseElems, 100);
    };

    var unobserveChanges = function unobserveChanges() {
      return;
    };

    var observeChanges = function observeChanges() {
      var observer;
      window.addEventListener("resize", debouncedCheck, false);
      window.addEventListener("orientationchange", debouncedCheck, false);

      if (window.MutationObserver) {
        observer = new MutationObserver(debouncedCheck);
        observer.observe(document.documentElement, {
          childList: true,
          subtree: true,
          attributes: true
        });

        unobserveChanges = function unobserveChanges() {
          try {
            observer.disconnect();
            window.removeEventListener("resize", debouncedCheck, false);
            window.removeEventListener("orientationchange", debouncedCheck, false);
          } catch (ignore) {}
        };
      } else {
        document.documentElement.addEventListener("DOMSubtreeModified", debouncedCheck, false);

        unobserveChanges = function unobserveChanges() {
          document.documentElement.removeEventListener("DOMSubtreeModified", debouncedCheck, false);
          window.removeEventListener("resize", debouncedCheck, false);
          window.removeEventListener("orientationchange", debouncedCheck, false);
        };
      }
    };

    var createRequest = function createRequest(url) {
      // In IE 9, cross origin requests can only be sent using XDomainRequest.
      // XDomainRequest would fail if CORS headers are not set.
      // Therefore, XDomainRequest should only be used with cross origin requests.
      function getOrigin(loc) {
        var a;

        if (loc.protocol !== undefined) {
          a = loc;
        } else {
          a = document.createElement("a");
          a.href = loc;
        }

        return a.protocol.replace(/:/g, "") + a.host;
      }

      var Request;
      var origin;
      var origin2;

      if (window.XMLHttpRequest) {
        Request = new XMLHttpRequest();
        origin = getOrigin(location);
        origin2 = getOrigin(url);

        if (Request.withCredentials === undefined && origin2 !== "" && origin2 !== origin) {
          Request = XDomainRequest || undefined;
        } else {
          Request = XMLHttpRequest;
        }
      }

      return Request;
    };

    var xlinkNS = "http://www.w3.org/1999/xlink";

    checkUseElems = function checkUseElems() {
      var base;
      var bcr;
      var fallback = ""; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.

      var hash;
      var href;
      var i;
      var inProgressCount = 0;
      var isHidden;
      var Request;
      var url;
      var uses;
      var xhr;

      function observeIfDone() {
        // If done with making changes, start watching for chagnes in DOM again
        inProgressCount -= 1;

        if (inProgressCount === 0) {
          // if all xhrs were resolved
          unobserveChanges(); // make sure to remove old handlers

          observeChanges(); // watch for changes to DOM
        }
      }

      function attrUpdateFunc(spec) {
        return function () {
          if (cache[spec.base] !== true) {
            spec.useEl.setAttributeNS(xlinkNS, "xlink:href", "#" + spec.hash);

            if (spec.useEl.hasAttribute("href")) {
              spec.useEl.setAttribute("href", "#" + spec.hash);
            }
          }
        };
      }

      function onloadFunc(xhr) {
        return function () {
          var body = document.body;
          var x = document.createElement("x");
          var svg;
          xhr.onload = null;
          x.innerHTML = xhr.responseText;
          svg = x.getElementsByTagName("svg")[0];

          if (svg) {
            svg.setAttribute("aria-hidden", "true");
            svg.style.position = "absolute";
            svg.style.width = 0;
            svg.style.height = 0;
            svg.style.overflow = "hidden";
            body.insertBefore(svg, body.firstChild);
          }

          observeIfDone();
        };
      }

      function onErrorTimeout(xhr) {
        return function () {
          xhr.onerror = null;
          xhr.ontimeout = null;
          observeIfDone();
        };
      }

      unobserveChanges(); // stop watching for changes to DOM
      // find all use elements

      uses = document.getElementsByTagName("use");

      for (i = 0; i < uses.length; i += 1) {
        try {
          bcr = uses[i].getBoundingClientRect();
        } catch (ignore) {
          // failed to get bounding rectangle of the use element
          bcr = false;
        }

        href = uses[i].getAttribute("href") || uses[i].getAttributeNS(xlinkNS, "href") || uses[i].getAttribute("xlink:href");

        if (href && href.split) {
          url = href.split("#");
        } else {
          url = ["", ""];
        }

        base = url[0];
        hash = url[1];
        isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;

        if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {
          // the use element is empty
          // if there is a reference to an external SVG, try to fetch it
          // use the optional fallback URL if there is no reference to an external SVG
          if (fallback && !base.length && hash && !document.getElementById(hash)) {
            base = fallback;
          }

          if (uses[i].hasAttribute("href")) {
            uses[i].setAttributeNS(xlinkNS, "xlink:href", href);
          }

          if (base.length) {
            // schedule updating xlink:href
            xhr = cache[base];

            if (xhr !== true) {
              // true signifies that prepending the SVG was not required
              setTimeout(attrUpdateFunc({
                useEl: uses[i],
                base: base,
                hash: hash
              }), 0);
            }

            if (xhr === undefined) {
              Request = createRequest(base);

              if (Request !== undefined) {
                xhr = new Request();
                cache[base] = xhr;
                xhr.onload = onloadFunc(xhr);
                xhr.onerror = onErrorTimeout(xhr);
                xhr.ontimeout = onErrorTimeout(xhr);
                xhr.open("GET", base);
                xhr.send();
                inProgressCount += 1;
              }
            }
          }
        } else {
          if (!isHidden) {
            if (cache[base] === undefined) {
              // remember this URL if the use element was not empty and no request was sent
              cache[base] = true;
            } else if (cache[base].onload) {
              // if it turns out that prepending the SVG is not necessary,
              // abort the in-progress xhr.
              cache[base].abort();
              delete cache[base].onload;
              cache[base] = true;
            }
          } else if (base.length && cache[base]) {
            setTimeout(attrUpdateFunc({
              useEl: uses[i],
              base: base,
              hash: hash
            }), 0);
          }
        }
      }

      uses = "";
      inProgressCount += 1;
      observeIfDone();
    };

    var _winLoad;

    _winLoad = function winLoad() {
      window.removeEventListener("load", _winLoad, false); // to prevent memory leaks

      tid = setTimeout(checkUseElems, 0);
    };

    if (document.readyState !== "complete") {
      // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.
      window.addEventListener("load", _winLoad, false);
    } else {
      // No need to add a listener if the document is already loaded, initialize immediately.
      _winLoad();
    }
  }
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
