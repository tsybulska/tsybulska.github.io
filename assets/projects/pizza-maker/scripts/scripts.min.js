"use strict";function _createForOfIteratorHelper(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=_unsupportedIterableToArray(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){l=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(l)throw o}}}}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $navIcon=document.querySelector(".nav__menu-icon");$navIcon.addEventListener("click",(function(){document.body.classList.toggle("menu-active")}));var mobile=window.matchMedia("(max-width: 767.9px)"),laptop=window.matchMedia("(min-width: 768px) and (max-width: 1250px)"),desktop=window.matchMedia("(min-width: 1251px)");if("make-page"===document.body.dataset.page){document.querySelector(".maker").querySelector(".maker__body").addEventListener("click",updatePizza);var $pizzaContainer=document.querySelector(".maker-pizza-bg"),pizzaLayers=2,pizzaTemp=[],images={"Красный":"Красный.png","Белый":"Белый.png","Цезарь":"Белый.png","Барбекю":"Красный.png","Томат":"Томат.png","Ананас":"Ананас.png","Маслины":"Маслины.png","Корнишоны":"Корнишоны.png","Салат":"Салат.png","Халапеньо":"Халапеньо.png","Перец":"Перец.png","Шампиньоны":"Шампиньоны.png","Лук":"Лук.png","Филе":"Филе.png","Фарш":"Фарш.png","Охотничьи":"Охотничьи.png","Копченый":"Копченый.png","Ветчина":"Ветчина.png","Бекон":"Бекон.png","Пепперони":"Пепперони.png","Креветки":"Креветки.png","Лосось":"Лосось.png","Мидии":"Фарш.png","Салями":"Салями.png","Моцарелла":"Моцарелла.png","Пармезан":"Пармезан.png"};function updatePizza(e){var t=e.target.closest(".maker-row__product").querySelector("span"),n=e.target.closest(".maker-row__product").dataset.type,r=document.createElement("div");for(var a in images)if(n===a)if(pizzaTemp.includes(a)){t.style.display="none";var o=$pizzaContainer.querySelector("[data-bg=".concat(a,"]"));$pizzaContainer.removeChild(o),pizzaTemp.splice(pizzaTemp.indexOf(n),1)}else t.style.display="block",r.setAttribute("data-bg",n),r.style.backgroundImage="url('./assets/img/".concat(images[a],"')"),r.style.zIndex=pizzaLayers,$pizzaContainer.appendChild(r),pizzaTemp.push(a);pizzaLayers++}function clearPizza(){document.querySelector(".maker").querySelectorAll(".maker-row__product").forEach((function(e){return e.querySelector("span").style.display="none"})),$pizzaContainer.innerHTML="",pizzaLayers=2,pizzaTemp=[]}document.querySelectorAll(".pizza-new").forEach((function(e){return e.addEventListener("click",clearPizza)}))}if("half-page"===document.body.dataset.page){var _step,accordions=document.querySelectorAll(".accordion"),_iterator=_createForOfIteratorHelper(accordions);try{var _loop=function(){var e,t=_step.value.querySelectorAll(".accordion__panel"),n=_createForOfIteratorHelper(t);try{var r=function(){var n=e.value;n.querySelector(".accordion__header").addEventListener("click",(function(){var e,r=_createForOfIteratorHelper(t);try{for(r.s();!(e=r.n()).done;){var a=e.value;a!==n&&a.classList.remove("accordion__expanded")}}catch(e){r.e(e)}finally{r.f()}n.classList.toggle("accordion__expanded")}))};for(n.s();!(e=n.n()).done;)r()}catch(e){n.e(e)}finally{n.f()}};for(_iterator.s();!(_step=_iterator.n()).done;)_loop()}catch(e){_iterator.e(e)}finally{_iterator.f()}document.querySelector(".half").querySelector(".maker__body").addEventListener("click",updateHalf);var warning=document.querySelector(".half").querySelectorAll(".half__warning"),$halfContainer=document.querySelector(".half-pizza-bg"),halfTemp=[],firstHalf=["1","2","3","4","5","6","7","8","9","10","11","12"],secondHalf=["13","14","15","16","17","18","19","20","21","22","23","24"],imagesHalf={1:"Адриано-Итальяно.png",2:"Сырная-Банда.png",3:"Томатный-Цыпленок.png",4:"Цезарь.png",5:"Ананасовый-Экспресс.png",6:"Болгарский-Перец.png",7:"Грибная-Цыпа.png",8:"Джони-Пеперони.png",9:"Дочь-Мясника.png",10:"Марго-Рита.png",11:"Пивная.png",12:"Подводная-Братва.png",13:"Адриано-Итальяно.png",14:"Сырная-Банда.png",15:"Томатный-Цыпленок.png",16:"Цезарь.png",17:"Ананасовый-Экспресс.png",18:"Болгарский-Перец.png",19:"Грибная-Цыпа.png",20:"Джони-Пеперони.png",21:"Дочь-Мясника.png",22:"Марго-Рита.png",23:"Пивная.png",24:"Подводная-Братва.png"};function updateHalf(e){var t=e.target.closest(".maker-row__product").querySelector("span"),n=e.target.closest(".maker-row__product").dataset.number;if(halfTemp.includes(n)){t.removeAttribute("style");var r=$halfContainer.querySelector('[data-halfbg="'.concat(n,'"]'));$halfContainer.removeChild(r),halfTemp.splice(halfTemp.indexOf(n),1)}else(0===halfTemp.length||1===halfTemp.length&&(firstHalf.includes(n)&&!firstHalf.includes(halfTemp[0])||secondHalf.includes(n)&&!secondHalf.includes(halfTemp[0])))&&a();function a(){halfTemp.push(n),t.style.display="block";var e=document.createElement("div");for(var r in imagesHalf)n===r&&(firstHalf.includes(n)?(desktop.matches&&e.classList.add("half-left-desktop"),laptop.matches&&e.classList.add("half-left-laptop"),mobile.matches&&e.classList.add("half-left-mobile")):secondHalf.includes(n)&&(desktop.matches&&e.classList.add("half-right-desktop"),laptop.matches&&e.classList.add("half-right-laptop"),mobile.matches&&e.classList.add("half-right-mobile")),e.setAttribute("data-halfbg",n),e.style.backgroundImage="url('./assets/img/".concat(imagesHalf[r],"')"),$halfContainer.appendChild(e))}2===halfTemp.length&&(warning.forEach((function(e){return e.style.display="none"})),desktop.matches&&(document.querySelector(".half").querySelector(".maker__body").style.marginTop="80px"),laptop.matches&&(document.querySelector(".half").querySelector(".maker-text__control").style.marginTop="30px")),halfTemp.length<2&&clearStyles()}function clearHalf(){document.querySelector(".half").querySelectorAll(".maker-row__product").forEach((function(e){e.querySelector("span").hasAttribute("style")&&e.querySelector("span").removeAttribute("style")})),halfTemp=[],$halfContainer.innerHTML="",clearStyles()}function clearStyles(){desktop.matches&&(document.querySelector(".warning__desktop").style.display="flex"),laptop.matches&&(document.querySelector(".warning__laptop").style.display="flex"),document.querySelector(".half").querySelector(".maker__body").style.marginTop="0",desktop.matches&&(document.querySelector(".half").querySelector(".maker__body").style.marginTop="0"),laptop.matches&&(document.querySelector(".half").querySelector(".maker-text__control").style.marginTop="0")}document.querySelectorAll(".half-new").forEach((function(e){return e.addEventListener("click",clearHalf)}))}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,r=Object.create(null),a=function(){clearTimeout(t),t=setTimeout(e,100)},o=function(){},i=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,r,a;return window.XMLHttpRequest&&(n=new XMLHttpRequest,r=t(location),a=t(e),n=void 0===n.withCredentials&&""!==a&&a!==r?XDomainRequest||void 0:XMLHttpRequest),n},l="http://www.w3.org/1999/xlink";e=function(){var e,t,n,c,s,u,d,p,f,m,h=0;function g(){var e;0===(h-=1)&&(o(),window.addEventListener("resize",a,!1),window.addEventListener("orientationchange",a,!1),window.MutationObserver?((e=new MutationObserver(a)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),o=function(){try{e.disconnect(),window.removeEventListener("resize",a,!1),window.removeEventListener("orientationchange",a,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",a,!1),o=function(){document.documentElement.removeEventListener("DOMSubtreeModified",a,!1),window.removeEventListener("resize",a,!1),window.removeEventListener("orientationchange",a,!1)}))}function y(e){return function(){!0!==r[e.base]&&(e.useEl.setAttributeNS(l,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function v(e){return function(){var t,n=document.body,r=document.createElement("x");e.onload=null,r.innerHTML=e.responseText,(t=r.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),g()}}function b(e){return function(){e.onerror=null,e.ontimeout=null,g()}}for(o(),f=document.getElementsByTagName("use"),s=0;s<f.length;s+=1){try{t=f[s].getBoundingClientRect()}catch(e){t=!1}e=(p=(c=f[s].getAttribute("href")||f[s].getAttributeNS(l,"href")||f[s].getAttribute("xlink:href"))&&c.split?c.split("#"):["",""])[0],n=p[1],u=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!u?(f[s].hasAttribute("href")&&f[s].setAttributeNS(l,"xlink:href",c),e.length&&(!0!==(m=r[e])&&setTimeout(y({useEl:f[s],base:e,hash:n}),0),void 0===m&&void 0!==(d=i(e))&&(m=new d,r[e]=m,m.onload=v(m),m.onerror=b(m),m.ontimeout=b(m),m.open("GET",e),m.send(),h+=1))):u?e.length&&r[e]&&setTimeout(y({useEl:f[s],base:e,hash:n}),0):void 0===r[e]?r[e]=!0:r[e].onload&&(r[e].abort(),delete r[e].onload,r[e]=!0)}f="",h+=1,g()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
